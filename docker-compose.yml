version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: costing_postgres
    environment:
      POSTGRES_DB: costing_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - costing_network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: costing_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - costing_network

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: costing_backend
    environment:
      NODE_ENV: production
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: costing_system
      DB_USER: postgres
      DB_PASSWORD: password
      JWT_SECRET: your-production-jwt-secret
      JWT_REFRESH_SECRET: your-production-refresh-secret
      REDIS_URL: redis://redis:6379
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./server/logs:/app/logs
    networks:
      - costing_network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: costing_frontend
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - costing_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: costing_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - costing_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  costing_network:
    driver: bridge
